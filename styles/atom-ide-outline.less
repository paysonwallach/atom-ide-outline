// The ui-variables file is provided by base themes of Atom.
//
// See https://github.com/atom/atom-dark-ui/blob/master/styles/ui-variables.less
// for a full listing of what's available.
@import "ui-variables";
@import "syntax-variables";

@font-face {
  font-family: 'symbol-icons';
  src: url('atom://atom-ide-outline/styles/symbol-icons.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

.outline-view {
  overflow-y: auto;

  ul {
    list-style-type: none;
    padding: 0;

    // same font as editor
    font-size: var(--editor-font-size);
    font-family: var(--editor-font-family);
    line-height: var(--editor-line-height);

    li > span {
      display: inline-block;
      width: 100%;
      padding: 2px 5px;

      &:hover {
        cursor: pointer;
        background: @background-color-highlight;
      }
    }
  }

  .fold {
    display: inline-block;
    vertical-align: middle;
    text-align: center;
    border: none;
    border-radius: 2px;
    height: var(--editor-line-height);
    width: 14px;
  }

  .icon {
    display: inline-block;
    width: 20px;
    text-align: center;
    font-weight: bold;
  }

  // syntax-variables for languge entites: https://github.com/atom/atom/blob/master/static/variables/syntax-variables.less#L32
  // atom-languageclient mapping: https://github.com/atom/atom-languageclient/blob/485bb9d706b422456640c9070eee456ef2cf09c0/lib/adapters/outline-view-adapter.ts#L270

  .styleByType(@type, @color) {
    .type-@{type} {
      color: @color;
      font-family: 'symbol-icons';
    }

    .fold-type-@{type} {
      background-color: @color;
    }
  }

  .styleByType("", @syntax-color-value);
  .styleByType(array, @syntax-color-value);
  .styleByType(boolean, @syntax-color-value);
  .styleByType(class, @syntax-color-class);
  .styleByType(constant, @syntax-color-constant);
  .styleByType(constructor, @syntax-color-function);
  .styleByType(enum, @syntax-color-variable);
  .styleByType(field, @syntax-color-tag);
  .styleByType(file, @syntax-color-import);
  .styleByType(function, @syntax-color-function);
  .styleByType(interface, @syntax-color-class);
  .styleByType(method, @syntax-color-method);
  .styleByType(module, @syntax-color-import);
  .styleByType(namespace, @syntax-color-keyword);
  .styleByType(number, @syntax-color-value);
  .styleByType(package, @syntax-color-import);
  .styleByType(property, @syntax-color-property);
  .styleByType(string, @syntax-color-value);
  .styleByType(variable, @syntax-color-variable);

  .status {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
    padding: 0 @component-padding;

    h1 {
      font-size: 1.5rem;
    }
  }
}
